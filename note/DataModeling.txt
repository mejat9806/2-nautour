! data modelling

is a process that taking unprocessed data generates by real world senarios and then structure it into logical data model in database based on certain set criteria 


step 1 : identify different types of relationships between data 
step 2 : referencing/normalization vs embedding/denormalization
step 3 : embedding or referencing other documents
step 4 : type of referencing


!1) type of relationships between data 
???????????????????
! one to one (1:1)
where one field only can have 1 value 

movie -----> name (1 movie 1 name)
???????????????????
!one to many (1:M)

in one to many there are few sub type 

1:few 
    example : movie A win 3 award 
1:many (this one important one )
    example : 1 movie can have hundreds/thousands of review

1:TON
    example : app can have million of log 
???????????????????

many to many (M:M)

example one movie can have many actor and one actor can act in many movie

! 2) referencing vs embending  (look at the photo)

?referencing /normalization
-- referencing have multiple documents 
 one main document and multiple childeren that have a reference  usually using id 
--using that id we can get the reference data from other documents

 pros performance :it easier to query each document on its own 
 cons we need 2 queries to get data from referenced document this bad for performance

?embeded /denormalization

-- all of the data is in one table 
-- it have one main document and it can have 1 or more embeded document 
example an array of data 

pros performance :we cn get info in on query
cons imposible to query the embeded document on its own 

! 3) when to embed and when to reference ?

? i)relationships type (how two dataset are related to each other)

if 1:few and 1:many use embeded
if 1:many ,1:TON or many:many use referencing

1 : many need more considerations from other criteria  (II and III)

? ii) data access patterns (how often data is read and written .read/write ratio)

if the data mostly read and does not change quickly (high read / write ratio) use embeded  example a link to a image 
if the data is updated alot (low read / high write ratio) for example movie + review that allow user to mark if the review helpful or not .it will need alot  update /write

? iii) data closeness (how "much" data is related ,how we want to query ) 

if datasets really belong together example user + email address

if we frequently need to query both datasets on their own it is better to use referencing example like movie quiz that require client to request a image of from the movie 

!

! 4) type of referencing (there is a image in the folder)
rule in monggoDB data modelling is array should not be allowed to grow infinitely 

? child refrence (best use for 1:few relationships)
this refrence will have 1 parents document and it can have many childeren . it references the child document using id in an array  and each child is its own document .this have few issues with big data like log because it will expand the array infinitely and max out the storage limit 
best use for 1:few relationships

?parent referencing (best for 1:many and 1:tons)
this refrence will have 1 parents document and it can have many childeren .the child is the one will be responsible to the refrence to the parent because of that we dont have big array problem 

? two-way refrence (best use for many : many )

this refrence will have refrence in both parent and child for example the movie document have the id of the actors act on it and the actor has the movie id that they act in 


SUMMARY

The most important principle is: Structure your data to match the ways that your application queries and updates data;

In other words: Identify the questions that arise from your application's use cases first, and then model your data so that
the questions can get answered in the most efficient way;

In general, always favor embedding, unless there is a good reason not to embed. Especially on 1:FEW and 1:MANY
relationships;

A 1:TON or a MANY:MANY relationship is usually a good reason to reference instead of embedding;

Also, favor referencing when data is updated a lot and if you need to frequently access a dataset on its own;

Use embedding when data is mostly read but rarely updated, and when two datasets belong intrinsically together;

Don't allow arrays to grow indefinitely. Therefore, if you need to normalize, use child referencing for 1:MANY
relationships, and parent referencing for 1:TON relationships;

Use two-way referencing for MANY:MANY relationships.


